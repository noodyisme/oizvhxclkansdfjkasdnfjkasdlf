plugins {
    id 'java'
    id 'jacoco'
    id 'org.jetbrains.kotlin.jvm' version '1.9.10'
    id 'org.jetbrains.kotlin.kapt' version '1.9.10'
    id 'org.sonarqube' version "4.0.0.2929"

    //jmh micro-benchmarking plugin: https://github.com/melix/jmh-gradle-plugin
    id "me.champeau.jmh" version "0.7.1"
}

allprojects {
    apply plugin: 'java'
    apply plugin: 'jacoco'
    apply plugin: 'org.jetbrains.kotlin.jvm'
    apply plugin: 'org.jetbrains.kotlin.kapt'
    apply plugin: 'org.sonarqube'
    apply plugin: 'me.champeau.jmh'

    apply plugin: 'maven-publish'
    apply plugin: 'java-library'

    java {
        toolchain {
            languageVersion.set(JavaLanguageVersion.of(17))
        }
        withJavadocJar()
        withSourcesJar()
    }

    repositories {
        maven { url 'https://artifactory.cloud.capitalone.com/artifactory/maven-internalfacing' }
        mavenLocal()
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java
            }
        }
        repositories {
            maven {
                url 'https://artifactory.cloud.capitalone.com/artifactory/maven-internalfacing'
                credentials {
                    username System.getenv("ARTIFACTORY_CREDS_USR")
                    password System.getenv("ARTIFACTORY_CREDS_PSW")
                }
            }
        }
    }

    dependencies {

        implementation 'org.jetbrains.kotlin:kotlin-stdlib:1.9.10'
        implementation 'org.apache.commons:commons-collections4:4.4'
        api 'com.capitalone.identity.identitybuilder:identity-builder-config-store-client:2.18.5-jdk17.1'
        implementation 'com.capitalone.identity.identitybuilder:decision-engine-core:3.1.27-jdk17.1'

        def eventModelLibVersion = '1.0.3-jdk17.1'
        implementation "com.capitalone.identity.identitybuilder:identity-builder-core-event-models:${eventModelLibVersion}"
        // Needed to apply javac annotation processing to Kotlin artifacts
        kapt "com.capitalone.identity.identitybuilder:identity-builder-core-event-models:${eventModelLibVersion}"

        // Vulnerabilities
        implementation 'net.minidev:json-smart:2.4.9'

        testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.2'
        testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.9.2'
        testImplementation 'org.mockito:mockito-junit-jupiter:4.10.0'
        def springBootVersion = '2.7.14'
        testImplementation "org.springframework.boot:spring-boot-starter-webflux:${springBootVersion}"
        testImplementation "org.springframework.boot:spring-boot-starter-test:${springBootVersion}"
        testImplementation 'io.projectreactor:reactor-test:3.5.4'
        testImplementation 'com.github.dpaukov:combinatoricslib3:3.3.3'

        // Required to avoid log4j conflict w/ decision-engine-core
        configurations.testImplementation {
            exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
        }
        configurations.all() {
            exclude group: 'org.yaml', module: 'snakeyaml'

            //pinned dependencies for vulnerabilities:
            resolutionStrategy {
                // required until updated via mockserver-netty v5.15.1+
                force('org.bouncycastle:bcprov-jdk18on:1.74') // https://www.mend.io/vulnerability-database/CVE-2023-33201
            }
        }
    }

    // run unit test only
    test {
        useJUnitPlatform {
            include '**/*Test.*'
            exclude '**/*IT.*'
        }
    }

    // run integration test only
    task integrationTest(type: Test) {
        useJUnitPlatform {
            exclude '**/*Test.*'
            include '**/*IT.*'
        }
        mustRunAfter test
    }

    // run both unit and integration tests
    task allTests {
        dependsOn test, integrationTest
    }

    check.dependsOn integrationTest, jacocoTestReport

    jacocoTestReport {
        reports {
            xml.required = true
        }
    }

    jmh {
        resultFormat = 'CSV'
        resultsFile = project.file("${project.buildDir}/test-results/benchmarking/benchmark-results.csv")
    }
    compileKotlin {
        kotlin {
            jvmToolchain(17)
        }
    }
    compileTestKotlin {
        kotlin {
            jvmToolchain(17)
        }
    }
}

group 'com.capitalone.identity.platform'
description 'Lightweight framework to load and execute policies'

// task to gather code coverage from multiple subprojects
// NOTE: the `JacocoReport` tasks do *not* depend on the `test` task by default. Meaning you have to ensure
// that `test` (or other tasks generating code coverage) run before generating the report.
// You can achieve this by calling the `test` lifecycle task manually
// $ ./gradlew test codeCoverageReport
tasks.register("codeCoverageReport", JacocoReport) {
    // If a subproject applies the 'jacoco' plugin, add the result it to the report
    subprojects { subproject ->
        subproject.plugins.withType(JacocoPlugin).configureEach {
            subproject.tasks.matching({ t -> t.extensions.findByType(JacocoTaskExtension) }).configureEach { testTask ->
                sourceSets subproject.sourceSets.main
                executionData(testTask)
            }

            // To automatically run `test` every time `./gradlew codeCoverageReport` is called,
            // you may want to set up a task dependency between them as shown below.
            // Note that this requires the `test` tasks to be resolved eagerly (see `forEach`) which
            // may have a negative effect on the configuration time of your build.
            subproject.tasks.matching({ t -> t.extensions.findByType(JacocoTaskExtension) }).forEach {
                rootProject.tasks.codeCoverageReport.dependsOn(it)
            }
        }
    }

    // enable the different report types (html, xml, csv)
    reports {
        // xml is usually used to integrate code coverage with
        // other tools like SonarQube, Coveralls or Codecov
        xml.required = true

        // HTML reports can be used to see code coverage
        // without any external tools
        html.required =  true
    }
}
